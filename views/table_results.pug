extends index.pug
block moreHead
    block evenMoreHead
        link(href='https://unpkg.com/tabulator-tables@5.0.7/dist/css/tabulator.min.css' rel='stylesheet')
        script(type='text/javascript' src='https://unpkg.com/tabulator-tables@5.0.7/dist/js/tabulator.min.js')
        link(href='tab.css' rel='stylesheet')

block content
    h1= page
    block specificUserType
        h2 Results
        #hiddenResults(style='display: none;')= results
        if(fields != "")
            select#filter-field
                if(multiple_fields == "true")
                    each f in fields
                        option= f
                else
                    option= fields
            select#filter-type
                option(value='=') '='
                option(value='!=') '!='
                option(value='<') '<'
                option(value='<=') '<='
                option(value='>') '>'
                option(value='>=') '>='
                option(value='like') 'like'
            input#filter-value(type='text' placeholder='value to filter')
            button#filter-clear Clear Filter
            #tabela

        

        script(type='text/javascript').
             var fieldEl = document.getElementById("filter-field");
             var typeEl = document.getElementById("filter-type");
             var valueEl = document.getElementById("filter-value");


            // Operators
            var compare = {
                '=': function(a, b) { return a == b},
                '<': function(a, b) { return a < b },
                '<=': function(a, b) { return a <= b },
                '>': function(a, b) { return a > b },
                '>=': function(a, b) { return a >= b },
                '!=': function(a, b) { return a != b },
                'like': function(a, b) { return a.includes(b)}
            };

            // Filter function
            var filterTree = function (data, filter) {
                var comp;
                if (data['_children'] && data['_children'].length > 0) {
                    for (var i in data['_children']) {

                        if(data[filter.field] === undefined) data[filter.field] = "";

                        comp = compare[filter.type](data[filter.field].toLowerCase(), filter.value.toLowerCase()) || filterTree(data['_children'][i], filter);
                        console.log("comp in for - " + comp);
                        //return compare[filter.type](data[filter.field], filter.value) || filterTree(data['_children'][i], filter);
                    }
                    console.log("loop is over, comp = "+ comp);
                    return comp;
                }

                if(data[filter.field] === undefined) data[filter.field] = "";

                console.log("No Children, comp = " + compare[filter.type](data[filter.field].toLowerCase(), filter.value.toLowerCase()));
                comp = compare[filter.type](data[filter.field].toLowerCase(), filter.value.toLowerCase());
                return comp;
            };

             function updateFilter(){
              var filterVal = fieldEl.options[fieldEl.selectedIndex].value;
              var typeVal = typeEl.options[typeEl.selectedIndex].value;

              var filter = filterVal == "function" ? customFilter : filterVal;

              if(filterVal == "function" ){
                typeEl.disabled = true;
                valueEl.disabled = true;
              }else{
                typeEl.disabled = false;
                valueEl.disabled = false;
              }

              if(filterVal){
                    // Set a filter. The operator can now be provided dynamically
                    table.setFilter(filterTree, {field:filter, type: typeVal, value:valueEl.value});
                    //table.setFilter(filter,typeVal, valueEl.value);
            }

            }

            //Update filters on value change
            document.getElementById("filter-field").addEventListener("change", updateFilter);
            document.getElementById("filter-type").addEventListener("change", updateFilter);
            document.getElementById("filter-value").addEventListener("keyup", updateFilter);

            //Clear filters on "Clear Filters" button click
            document.getElementById("filter-clear").addEventListener("click", function(){
              fieldEl.value = "";
              typeEl.value = "=";
              valueEl.value = "";

              table.clearFilter();
            });

            
            var tabledata = JSON.parse(document.getElementById("hiddenResults").innerHTML);
            //define table
            var table = new Tabulator("#tabela", {
                data:tabledata,
                autoColumns:true,
                dataTree:true,
                dataTreeStartExpanded:false,
                dataTreeFilter:true,
                //pagination: true,
                //paginationSize: Math.min(tabledata.length, 5),
                height: 190,
                layout:"fitDataStretch",
                });